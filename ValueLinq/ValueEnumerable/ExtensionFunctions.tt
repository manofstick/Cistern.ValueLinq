<# /* #>

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using Cistern.ValueLinq.Containers;
using Cistern.ValueLinq.Nodes;
using Cistern.ValueLinq.ValueEnumerable;
using System;
using System.Buffers;
using System.Collections.Generic;

namespace Cistern.ValueLinq
{
<#
    var valueEnumerableTypes = new []
    {
        (
            Type:"ValueEnumerable",
            NodeInterface:new Func<string, string>(genericArg => $"INode<{genericArg}>")
        ),
        (
            Type:"ValueOrderedEnumerable",
            NodeInterface:new Func<string, string>(genericArg => $"IOrderedNode<{genericArg}>")
        ),
    };

    foreach(var item in valueEnumerableTypes)
    {
        var valueEnumerableType = item.Type;
        var nodeTSource = item.NodeInterface("TSource");
        var nodeUSource = item.NodeInterface("U");
        var nodeDecimal = item.NodeInterface("Decimal");
        var nodeDouble = item.NodeInterface("double");
        var nodeFloat = item.NodeInterface("float");
        var nodeInt = item.NodeInterface("int");
        var nodeLong = item.NodeInterface("long");
        var nodeDecimalNullable = item.NodeInterface("Decimal?");
        var nodeDoubleNullable = item.NodeInterface("double?");
        var nodeFloatNullable = item.NodeInterface("float?");
        var nodeIntNullable = item.NodeInterface("int?");
        var nodeLongNullable = item.NodeInterface("long?");

#>
    public struct <#= valueEnumerableType #><TSource, TNode>
        : IValueEnumerable<TSource>
        , <#= nodeTSource #>
        where TNode : <#= nodeTSource #>
    {
        internal TNode Node;

        public <#= valueEnumerableType #>(in TNode node)
            => Node = node;

        public ValueEnumerator<TSource> GetEnumerator()
            => Nodes<TSource>.CreateValueEnumerator(in Node);
        IEnumerator<TSource> IEnumerable<TSource>.GetEnumerator()
            => Nodes<TSource>.CreateEnumerator(in Node);
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            => ((IEnumerable<TSource>)this).GetEnumerator();

        void INode.GetCountInformation(out CountInformation info)
            => Node.GetCountInformation(out info);

        bool INode.TryPullOptimization<TRequest, TResult, Nodes>(in TRequest request, ref Nodes nodes, out TResult creation)
            => Node.TryPullOptimization<TRequest, TResult, Nodes>(in request, ref nodes, out creation);
        CreationType INode.CreateViaPullAscent<CreationType, EnumeratorElement, Enumerator, Tail>(ref Tail tail, ref Enumerator enumerator)
            => Node.CreateViaPullAscent<CreationType, EnumeratorElement, Enumerator, Tail>(ref tail, ref enumerator);
        CreationType INode.CreateViaPullDescend<CreationType, Head, Tail>(ref Nodes<Head, Tail> nodes)
            => Node.CreateViaPullDescend<CreationType, Head, Tail>(ref nodes);

        bool INode.TryPushOptimization<TRequest, TResult>(in TRequest request, out TResult result)
            => Node.TryPushOptimization<TRequest, TResult>(in request, out result);
        TResult INode<TSource>.CreateViaPush<TResult, FEnumerator>(in FEnumerator fenum)
            => Node.CreateViaPush<TResult, FEnumerator>(fenum);
<#
        if (valueEnumerableType == "ValueOrderedEnumerable")
        {
#>

        TResult IOrderedNode<TSource>.CreateOrderedEnumerableViaPush<TKey, TResult, FEnumerator>(in FEnumerator fenum, Func<TSource, TKey> keySelector, IComparer<TKey> comparer, bool descending)
            => Node.CreateOrderedEnumerableViaPush<TKey, TResult, FEnumerator>(in fenum, keySelector, comparer, descending);
        CreationType IOrderedNode<TSource>.CreateOrderedEnumerableViaPull<TKey, CreationType, Head, Tail>(ref Nodes<Head, Tail> nodes, Func<TSource, TKey> keySelector, IComparer<TKey> comparer, bool descending)
            => Node.CreateOrderedEnumerableViaPull<TKey, CreationType, Head, Tail>(ref nodes, keySelector, comparer, descending);
<#
        }
#>
    }


    public static partial class Enumerable
    {
        public static TSource Aggregate<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> source, Func<TSource, TSource, TSource> func)
            where Inner : <#= nodeTSource #>
            => NodeImpl.Aggregate(in source.Node, func);

        public static void ForEach<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> source, Action<TSource> func)
            where Inner : <#= nodeTSource #>
            => NodeImpl.ForEach(in source.Node, func);

        public static TSource ForEach<TSource, U, Inner>(in this <#= valueEnumerableType #><U, Inner> source, TSource seed, RefAction<TSource, U> func)
            where Inner : <#= nodeUSource #>
            => NodeImpl.ForEach(in source.Node, seed, func);

        public static TSource ForEach<TSource, U, Inner, RefAction>(in this <#= valueEnumerableType #><U, Inner> source, TSource seed, RefAction func)
            where Inner : <#= nodeUSource #>
            where RefAction : IRefAction<TSource, U>
            => NodeImpl.ForEach<TSource, U, Inner, RefAction>(in source.Node, seed, func);

        public static TAccumulate Aggregate<TSource, TAccumulate, Inner>(in this <#= valueEnumerableType #><TSource, Inner> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)
            where Inner : <#= nodeTSource #>
            => NodeImpl.Aggregate(in source.Node, seed, func);

        public static TResult Aggregate<TSource, TAccumulate, TResult, Inner>(in this <#= valueEnumerableType #><TSource, Inner> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)
            where Inner : <#= nodeTSource #>
            => NodeImpl.Aggregate(in source.Node, seed, func, resultSelector);

        public static bool All<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> source, Func<TSource, bool> predicate)
            where Inner : <#= nodeTSource #>
            => NodeImpl.All(in source.Node, predicate);

        public static bool All<TSource, Inner, Predicate>(in this <#= valueEnumerableType #><TSource, Inner> source, Predicate predicate)
            where Inner : <#= nodeTSource #>
            where Predicate : IFunc<TSource, bool>
            => NodeImpl.All<TSource, Inner, Predicate>(in source.Node, predicate);

        public static bool Any<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> source)
            where Inner : <#= nodeTSource #>
            => NodeImpl.Any<TSource, Inner>(in source.Node);

        public static bool Any<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> source, Func<TSource, bool> predicate)
            where Inner : <#= nodeTSource #>
            => NodeImpl.Any(in source.Node, predicate);

        public static ValueEnumerable<U, SelectNode<TSource, U, TPrior>> Select<TSource, U, TPrior>(in this <#= valueEnumerableType #><TSource, TPrior> prior, Func<TSource, U> selector)
            where TPrior : <#= nodeTSource #>
            => new (NodeImpl.Select(in prior.Node, selector));

        public static ValueEnumerable<U, Select_InNode<TSource, U, TPrior>> Select<TSource, U, TPrior>(in this <#= valueEnumerableType #><TSource, TPrior> prior, InFunc<TSource, U> f)
            where TPrior : <#= nodeTSource #>
            => new (NodeImpl.Select(in prior.Node, f));

        public static ValueEnumerable<U, SelectIdxNode<TSource, U, TPrior>> Select<TSource, U, TPrior>(in this <#= valueEnumerableType #><TSource, TPrior> prior, Func<TSource, int, U> selector)
            where TPrior : <#= nodeTSource #>
            => new (NodeImpl.Select(in prior.Node, selector));

        public static ValueEnumerable<TSource, WhereNode<TSource, TPrior>> Where<TSource, TPrior>(in this <#= valueEnumerableType #><TSource, TPrior> prior, Func<TSource, bool> predicate)
            where TPrior : <#= nodeTSource #>
            => new (NodeImpl.Where(in prior.Node, predicate));

        public static ValueEnumerable<TSource, WhereIdxNode<TSource, TPrior>> Where<TSource, TPrior>(in this <#= valueEnumerableType #><TSource, TPrior> prior, Func<TSource, int, bool> predicate)
            where TPrior : <#= nodeTSource #>
            => new (NodeImpl.Where(in prior.Node, predicate));

        public static ValueEnumerable<TSource, Where_InNode<TSource, TPrior>> Where<TSource, TPrior>(in this <#= valueEnumerableType #><TSource, TPrior> prior, InFunc<TSource, bool> f)
            where TPrior : <#= nodeTSource #>
            => new (NodeImpl.Where(in prior.Node, f));

        public static ValueEnumerable<TSource, SkipNode<TSource, TPrior>> Skip<TSource, TPrior>(in this <#= valueEnumerableType #><TSource, TPrior> prior, int count)
            where TPrior : <#= nodeTSource #>
            => new (NodeImpl.Skip<TSource, TPrior>(in prior.Node, count));

        public static ValueEnumerable<TSource, SkipWhileNode<TSource, TPrior>> SkipWhile<TSource, TPrior>(in this <#= valueEnumerableType #><TSource, TPrior> prior, Func<TSource, bool> predicate)
            where TPrior : <#= nodeTSource #>
            => new(NodeImpl.SkipWhile(in prior.Node, predicate));

        public static ValueEnumerable<TSource, SkipWhileIdxNode<TSource, TPrior>> SkipWhile<TSource, TPrior>(in this <#= valueEnumerableType #><TSource, TPrior> prior, Func<TSource, int, bool> predicate)
            where TPrior : <#= nodeTSource #>
            => new (NodeImpl.SkipWhile(in prior.Node, predicate));

        public static ValueEnumerable<TSource, TakeNode<TSource, TPrior>> Take<TSource, TPrior>(in this <#= valueEnumerableType #><TSource, TPrior> prior, int count)
            where TPrior : <#= nodeTSource #>
            => new (NodeImpl.Take<TSource, TPrior>(in prior.Node, count));

        public static ValueEnumerable<TSource, TakeWhileNode<TSource, TPrior>> TakeWhile<TSource, TPrior>(in this <#= valueEnumerableType #><TSource, TPrior> prior, Func<TSource, bool> predicate)
            where TPrior : <#= nodeTSource #>
            => new (NodeImpl.TakeWhile(in prior.Node, predicate));

        public static ValueEnumerable<TSource, TakeWhileIdxNode<TSource, TPrior>> TakeWhile<TSource, TPrior>(in this <#= valueEnumerableType #><TSource, TPrior> prior, Func<TSource, int, bool> predicate)
            where TPrior : <#= nodeTSource #>
            => new(NodeImpl.TakeWhile(in prior.Node, predicate));

        public static TSource[] ToArray<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, int? maybeMaxCountForStackBasedPath = 64, (ArrayPool<TSource> arrayPool, bool cleanBuffers)? arrayPoolInfo = null)
            where Inner : <#= nodeTSource #>
            => NodeImpl.ToArray(in inner.Node, maybeMaxCountForStackBasedPath, in arrayPoolInfo);

        public static TSource[] ToArrayUsePool<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, ArrayPool<TSource> maybeArrayPool = null, bool? maybeCleanBuffers = null, bool viaPull = false)
            where Inner : <#= nodeTSource #>
            => NodeImpl.ToArrayUsePool(in inner.Node, maybeArrayPool, maybeCleanBuffers, viaPull);

        public static TSource[] ToArrayUseStack<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, int maxStackItemCount = 64, (ArrayPool<TSource> arrayPool, bool cleanBuffers)? arrayPoolInfo = null)
            where Inner : <#= nodeTSource #>
            => NodeImpl.ToArrayUseStack(in inner.Node, maxStackItemCount, arrayPoolInfo);

        public static List<TSource> ToList<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, int? maybeMaxCountForStackBasedPath = 64, (ArrayPool<TSource> arrayPool, bool cleanBuffers)? arrayPoolInfo = null)
            where Inner : <#= nodeTSource #>
            => NodeImpl.ToList(in inner.Node, maybeMaxCountForStackBasedPath, arrayPoolInfo);

        public static List<TSource> ToListUsePool<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, ArrayPool<TSource> maybeArrayPool = null, bool? maybeCleanBuffers = null, bool viaPull = false)
            where Inner : <#= nodeTSource #>
            => NodeImpl.ToListUsePool(in inner.Node, maybeArrayPool, maybeCleanBuffers, viaPull);

        public static List<TSource> ToListUseStack<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, int maxStackItemCount = 64, (ArrayPool<TSource> arrayPool, bool cleanBuffers)? arrayPoolInfo = null)
            where Inner : <#= nodeTSource #>
            => NodeImpl.ToListUseStack(in inner.Node, maxStackItemCount, arrayPoolInfo);

        public static TSource Last<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner)
            where Inner : <#= nodeTSource #>
            => NodeImpl.Last<TSource, Inner>(in inner.Node);

        public static TSource Last<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, bool> predicate)
            where Inner : <#= nodeTSource #>
            => NodeImpl.Last(in inner.Node, predicate);

        public static TSource LastOrDefault<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner)
            where Inner : <#= nodeTSource #>
            => NodeImpl.LastOrDefault<TSource, Inner>(in inner.Node);

        public static TSource LastOrDefault<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, bool> predicate)
            where Inner : <#= nodeTSource #>
            => NodeImpl.LastOrDefault(in inner.Node, predicate);

        public static TSource First<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner)
            where Inner : <#= nodeTSource #>
            => NodeImpl.First<TSource, Inner>(in inner.Node);

        public static TSource First<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, bool> predicate)
            where Inner : <#= nodeTSource #>
            => NodeImpl.First(in inner.Node, predicate);

        public static TSource FirstOrDefault<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner)
            where Inner : <#= nodeTSource #>
            => NodeImpl.FirstOrDefault<TSource, Inner>(in inner.Node);

        public static TSource FirstOrDefault<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, bool> predicate)
            where Inner : <#= nodeTSource #>
            => NodeImpl.FirstOrDefault(in inner.Node, predicate);

        public static TSource Single<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner)
            where Inner : <#= nodeTSource #> 
            => NodeImpl.Single<TSource, Inner>(in inner.Node);

        public static TSource Single<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, bool> predicate)
            where Inner : <#= nodeTSource #>
            => NodeImpl.Single(in inner.Node, predicate);

        public static TSource SingleOrDefault<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner)
            where Inner : <#= nodeTSource #>
            => NodeImpl.SingleOrDefault<TSource, Inner>(in inner.Node);

        public static TSource SingleOrDefault<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, bool> predicate)
            where Inner : <#= nodeTSource #>
            => NodeImpl.SingleOrDefault(in inner.Node, predicate);

        public static TSource ElementAt<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, int index)
            where Inner : <#= nodeTSource #>
            => NodeImpl.ElementAt<TSource, Inner>(in inner.Node, index);

        public static TSource ElementAtOrDefault<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, int index)
            where Inner : <#= nodeTSource #>
            => NodeImpl.ElementAtOrDefault<TSource, Inner>(in inner.Node, index);

        public static decimal Average<Inner>(in this <#= valueEnumerableType #><decimal, Inner> inner) where Inner : <#= nodeDecimal #> => NodeImpl.AverageDecimal(in inner.Node);
        public static double  Average<Inner>(in this <#= valueEnumerableType #><double,  Inner> inner) where Inner : <#= nodeDouble #>  => NodeImpl.AverageDouble(in inner.Node);
        public static float   Average<Inner>(in this <#= valueEnumerableType #><float,   Inner> inner) where Inner : <#= nodeFloat #>   => NodeImpl.AverageFloat(in inner.Node);
        public static double  Average<Inner>(in this <#= valueEnumerableType #><int,     Inner> inner) where Inner : <#= nodeInt #>     => NodeImpl.AverageInt(in inner.Node);
        public static double  Average<Inner>(in this <#= valueEnumerableType #><long,    Inner> inner) where Inner : <#= nodeLong #>    => NodeImpl.AverageLong(in inner.Node);

        public static decimal Average<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, decimal> selector) where Inner : <#= nodeTSource #> => NodeImpl.AverageDecimal(NodeImpl.Select(in inner.Node, selector));
        public static double  Average<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, double> selector)  where Inner : <#= nodeTSource #> => NodeImpl.AverageDouble( NodeImpl.Select(in inner.Node, selector));
        public static float   Average<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, float> selector)   where Inner : <#= nodeTSource #> => NodeImpl.AverageFloat(  NodeImpl.Select(in inner.Node, selector));
        public static double  Average<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, int> selector)     where Inner : <#= nodeTSource #> => NodeImpl.AverageInt(    NodeImpl.Select(in inner.Node, selector));
        public static double  Average<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, long> selector)    where Inner : <#= nodeTSource #> => NodeImpl.AverageLong(   NodeImpl.Select(in inner.Node, selector));

        public static decimal? Average<Inner>(in this <#= valueEnumerableType #><decimal?, Inner> inner) where Inner : <#= nodeDecimalNullable #> => NodeImpl.AverageNullableDecimal(in inner.Node);
        public static double?  Average<Inner>(in this <#= valueEnumerableType #><double?,  Inner> inner) where Inner : <#= nodeDoubleNullable #>  => NodeImpl.AverageNullableDouble(in inner.Node);
        public static float?   Average<Inner>(in this <#= valueEnumerableType #><float?,   Inner> inner) where Inner : <#= nodeFloatNullable #>   => NodeImpl.AverageNullableFloat(in inner.Node);
        public static double?  Average<Inner>(in this <#= valueEnumerableType #><int?,     Inner> inner) where Inner : <#= nodeIntNullable #>     => NodeImpl.AverageNullableInt(in inner.Node);
        public static double?  Average<Inner>(in this <#= valueEnumerableType #><long?,    Inner> inner) where Inner : <#= nodeLongNullable #>    => NodeImpl.AverageNullableLong(in inner.Node);

        public static decimal? Average<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, decimal?> selector) where Inner : <#= nodeTSource #> => NodeImpl.AverageNullableDecimal(NodeImpl.Select(in inner.Node, selector));
        public static double?  Average<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, double?>  selector) where Inner : <#= nodeTSource #> => NodeImpl.AverageNullableDouble( NodeImpl.Select(in inner.Node, selector));
        public static float?   Average<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, float?>   selector) where Inner : <#= nodeTSource #> => NodeImpl.AverageNullableFloat(  NodeImpl.Select(in inner.Node, selector));
        public static double?  Average<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, int?>     selector) where Inner : <#= nodeTSource #> => NodeImpl.AverageNullableInt(    NodeImpl.Select(in inner.Node, selector));
        public static double?  Average<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, long?>    selector) where Inner : <#= nodeTSource #> => NodeImpl.AverageNullableLong(   NodeImpl.Select(in inner.Node, selector));

        public static decimal Min<Inner>(   in this <#= valueEnumerableType #><decimal, Inner> inner) where Inner : <#= nodeDecimal #>  => NodeImpl.MinDecimal(   in inner.Node);
        public static double  Min<Inner>(   in this <#= valueEnumerableType #><double,  Inner> inner) where Inner : <#= nodeDouble #>   => NodeImpl.MinDouble(    in inner.Node);
        public static float   Min<Inner>(   in this <#= valueEnumerableType #><float,   Inner> inner) where Inner : <#= nodeFloat #>    => NodeImpl.MinFloat(     in inner.Node);
        public static int     Min<Inner>(   in this <#= valueEnumerableType #><int,     Inner> inner) where Inner : <#= nodeInt #>      => NodeImpl.MinInt(       in inner.Node);
        public static long    Min<Inner>(   in this <#= valueEnumerableType #><long,    Inner> inner) where Inner : <#= nodeLong #>     => NodeImpl.MinLong(      in inner.Node);
        public static TSource       Min<TSource, Inner>(in this <#= valueEnumerableType #><TSource,       Inner> inner) where Inner : <#= nodeTSource #>        => NodeImpl.Min<TSource, Inner>(in inner.Node);

        public static decimal Min<TSource, Inner>(   in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, decimal> selector) where Inner : <#= nodeTSource #> => NodeImpl.MinDecimal(                   NodeImpl.Select(in inner.Node, selector));
        public static double  Min<TSource, Inner>(   in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, double>  selector) where Inner : <#= nodeTSource #> => NodeImpl.MinDouble(                    NodeImpl.Select(in inner.Node, selector));
        public static float   Min<TSource, Inner>(   in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, float>   selector) where Inner : <#= nodeTSource #> => NodeImpl.MinFloat(                     NodeImpl.Select(in inner.Node, selector));
        public static int     Min<TSource, Inner>(   in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, int>     selector) where Inner : <#= nodeTSource #> => NodeImpl.MinInt(                       NodeImpl.Select(in inner.Node, selector));
        public static long    Min<TSource, Inner>(   in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, long>    selector) where Inner : <#= nodeTSource #> => NodeImpl.MinLong(                      NodeImpl.Select(in inner.Node, selector));
        public static U       Min<TSource, U, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, U>       selector) where Inner : <#= nodeTSource #> => NodeImpl.Min<U, SelectNode<TSource,U,Inner>>(NodeImpl.Select(in inner.Node, selector));

        public static decimal? Min<Inner>(in this <#= valueEnumerableType #><decimal?, Inner> inner) where Inner : <#= nodeDecimalNullable #>  => NodeImpl.MinNullableDecimal(in inner.Node);
        public static double?  Min<Inner>(in this <#= valueEnumerableType #><double?,  Inner> inner) where Inner : <#= nodeDoubleNullable #>   => NodeImpl.MinNullableDouble( in inner.Node);
        public static float?   Min<Inner>(in this <#= valueEnumerableType #><float?,   Inner> inner) where Inner : <#= nodeFloatNullable #>    => NodeImpl.MinNullableFloat(  in inner.Node);
        public static int?     Min<Inner>(in this <#= valueEnumerableType #><int?,     Inner> inner) where Inner : <#= nodeIntNullable #>      => NodeImpl.MinNullableInt(    in inner.Node);
        public static long?    Min<Inner>(in this <#= valueEnumerableType #><long?,    Inner> inner) where Inner : <#= nodeLongNullable #>     => NodeImpl.MinNullableLong(   in inner.Node);

        public static decimal? Min<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, decimal?> selector) where Inner : <#= nodeTSource #> => NodeImpl.MinNullableDecimal(NodeImpl.Select(in inner.Node, selector));
        public static double?  Min<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, double?>  selector) where Inner : <#= nodeTSource #> => NodeImpl.MinNullableDouble( NodeImpl.Select(in inner.Node, selector));
        public static float?   Min<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, float?>   selector) where Inner : <#= nodeTSource #> => NodeImpl.MinNullableFloat(  NodeImpl.Select(in inner.Node, selector));
        public static int?     Min<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, int?>     selector) where Inner : <#= nodeTSource #> => NodeImpl.MinNullableInt(    NodeImpl.Select(in inner.Node, selector));
        public static long?    Min<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, long?>    selector) where Inner : <#= nodeTSource #> => NodeImpl.MinNullableLong(   NodeImpl.Select(in inner.Node, selector));

        public static decimal Max<Inner>(   in this <#= valueEnumerableType #><decimal, Inner> inner) where Inner : <#= nodeDecimal #> => NodeImpl.MaxDecimal(   in inner.Node);
        public static double  Max<Inner>(   in this <#= valueEnumerableType #><double,  Inner> inner) where Inner : <#= nodeDouble #>   => NodeImpl.MaxDouble(    in inner.Node);
        public static float   Max<Inner>(   in this <#= valueEnumerableType #><float,   Inner> inner) where Inner : <#= nodeFloat #>    => NodeImpl.MaxFloat(     in inner.Node);
        public static int     Max<Inner>(   in this <#= valueEnumerableType #><int,     Inner> inner) where Inner : <#= nodeInt #>      => NodeImpl.MaxInt(       in inner.Node);
        public static long    Max<Inner>(   in this <#= valueEnumerableType #><long,    Inner> inner) where Inner : <#= nodeLong #>     => NodeImpl.MaxLong(      in inner.Node);
        public static TSource       Max<TSource, Inner>(in this <#= valueEnumerableType #><TSource,       Inner> inner) where Inner : <#= nodeTSource #>        => NodeImpl.Max<TSource, Inner>(in inner.Node);

        public static decimal Max<TSource, Inner>(   in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, decimal> selector) where Inner : <#= nodeTSource #> => NodeImpl.MaxDecimal(                   NodeImpl.Select(in inner.Node, selector));
        public static double  Max<TSource, Inner>(   in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, double>  selector) where Inner : <#= nodeTSource #> => NodeImpl.MaxDouble(                    NodeImpl.Select(in inner.Node, selector));
        public static float   Max<TSource, Inner>(   in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, float>   selector) where Inner : <#= nodeTSource #> => NodeImpl.MaxFloat(                     NodeImpl.Select(in inner.Node, selector));
        public static int     Max<TSource, Inner>(   in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, int>     selector) where Inner : <#= nodeTSource #> => NodeImpl.MaxInt(                       NodeImpl.Select(in inner.Node, selector));
        public static long    Max<TSource, Inner>(   in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, long>    selector) where Inner : <#= nodeTSource #> => NodeImpl.MaxLong(                      NodeImpl.Select(in inner.Node, selector));
        public static U       Max<TSource, U, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, U>       selector) where Inner : <#= nodeTSource #> => NodeImpl.Max<U, SelectNode<TSource,U,Inner>>(NodeImpl.Select(in inner.Node, selector));

        public static decimal? Max<Inner>(in this <#= valueEnumerableType #><decimal?, Inner> inner) where Inner : <#= nodeDecimalNullable #> => NodeImpl.MaxNullableDecimal(in inner.Node);
        public static double?  Max<Inner>(in this <#= valueEnumerableType #><double?,  Inner> inner) where Inner : <#= nodeDoubleNullable #>  => NodeImpl.MaxNullableDouble( in inner.Node);
        public static float?   Max<Inner>(in this <#= valueEnumerableType #><float?,   Inner> inner) where Inner : <#= nodeFloatNullable #>   => NodeImpl.MaxNullableFloat(  in inner.Node);
        public static int?     Max<Inner>(in this <#= valueEnumerableType #><int?,     Inner> inner) where Inner : <#= nodeIntNullable #>     => NodeImpl.MaxNullableInt(    in inner.Node);
        public static long?    Max<Inner>(in this <#= valueEnumerableType #><long?,    Inner> inner) where Inner : <#= nodeLongNullable #>    => NodeImpl.MaxNullableLong(   in inner.Node);

        public static decimal? Max<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, decimal?> selector) where Inner : <#= nodeTSource #> => NodeImpl.MaxNullableDecimal(NodeImpl.Select(in inner.Node, selector));
        public static double?  Max<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, double?>  selector) where Inner : <#= nodeTSource #> => NodeImpl.MaxNullableDouble( NodeImpl.Select(in inner.Node, selector));
        public static float?   Max<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, float?>   selector) where Inner : <#= nodeTSource #> => NodeImpl.MaxNullableFloat(  NodeImpl.Select(in inner.Node, selector));
        public static int?     Max<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, int?>     selector) where Inner : <#= nodeTSource #> => NodeImpl.MaxNullableInt(    NodeImpl.Select(in inner.Node, selector));
        public static long?    Max<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, long?>    selector) where Inner : <#= nodeTSource #> => NodeImpl.MaxNullableLong(   NodeImpl.Select(in inner.Node, selector));

        public static decimal Sum<Inner>(   in this <#= valueEnumerableType #><decimal, Inner> inner) where Inner : <#= nodeDecimal #> => NodeImpl.SumDecimal(   in inner.Node);
        public static double  Sum<Inner>(   in this <#= valueEnumerableType #><double,  Inner> inner) where Inner : <#= nodeDouble #>   => NodeImpl.SumDouble(    in inner.Node);
        public static float   Sum<Inner>(   in this <#= valueEnumerableType #><float,   Inner> inner) where Inner : <#= nodeFloat #>    => NodeImpl.SumFloat(     in inner.Node);
        public static int     Sum<Inner>(   in this <#= valueEnumerableType #><int,     Inner> inner) where Inner : <#= nodeInt #>      => NodeImpl.SumInt(       in inner.Node);
        public static long    Sum<Inner>(   in this <#= valueEnumerableType #><long,    Inner> inner) where Inner : <#= nodeLong #>     => NodeImpl.SumLong(      in inner.Node);

        public static decimal Sum<TSource, Inner>(   in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, decimal> selector) where Inner : <#= nodeTSource #> => NodeImpl.SumDecimal(NodeImpl.Select(in inner.Node, selector));
        public static double  Sum<TSource, Inner>(   in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, double>  selector) where Inner : <#= nodeTSource #> => NodeImpl.SumDouble( NodeImpl.Select(in inner.Node, selector));
        public static float   Sum<TSource, Inner>(   in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, float>   selector) where Inner : <#= nodeTSource #> => NodeImpl.SumFloat(  NodeImpl.Select(in inner.Node, selector));
        public static int     Sum<TSource, Inner>(   in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, int>     selector) where Inner : <#= nodeTSource #> => NodeImpl.SumInt(    NodeImpl.Select(in inner.Node, selector));
        public static long    Sum<TSource, Inner>(   in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, long>    selector) where Inner : <#= nodeTSource #> => NodeImpl.SumLong(   NodeImpl.Select(in inner.Node, selector));

        public static decimal? Sum<Inner>(in this <#= valueEnumerableType #><decimal?, Inner> inner) where Inner : <#= nodeDecimalNullable #>  =>  NodeImpl.SumNullableDecimal(in inner.Node);
        public static double?  Sum<Inner>(in this <#= valueEnumerableType #><double?,  Inner> inner) where Inner : <#= nodeDoubleNullable #>   =>  NodeImpl.SumNullableDouble( in inner.Node);
        public static float?   Sum<Inner>(in this <#= valueEnumerableType #><float?,   Inner> inner) where Inner : <#= nodeFloatNullable #>    =>  NodeImpl.SumNullableFloat(  in inner.Node);
        public static int?     Sum<Inner>(in this <#= valueEnumerableType #><int?,     Inner> inner) where Inner : <#= nodeIntNullable #>      =>  NodeImpl.SumNullableInt(    in inner.Node);
        public static long?    Sum<Inner>(in this <#= valueEnumerableType #><long?,    Inner> inner) where Inner : <#= nodeLongNullable #>     =>  NodeImpl.SumNullableLong(   in inner.Node);

        public static decimal? Sum<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, decimal?> selector) where Inner : <#= nodeTSource #> => NodeImpl.SumNullableDecimal(NodeImpl.Select(in inner.Node, selector));
        public static double?  Sum<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, double?>  selector) where Inner : <#= nodeTSource #> => NodeImpl.SumNullableDouble( NodeImpl.Select(in inner.Node, selector));
        public static float?   Sum<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, float?>   selector) where Inner : <#= nodeTSource #> => NodeImpl.SumNullableFloat(  NodeImpl.Select(in inner.Node, selector));
        public static int?     Sum<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, int?>     selector) where Inner : <#= nodeTSource #> => NodeImpl.SumNullableInt(    NodeImpl.Select(in inner.Node, selector));
        public static long?    Sum<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, Func<TSource, long?>    selector) where Inner : <#= nodeTSource #> => NodeImpl.SumNullableLong(   NodeImpl.Select(in inner.Node, selector));

        public static int Count<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, bool ignorePotentialSideEffects = false)
            where Inner : <#= nodeTSource #>
            => NodeImpl.Count<TSource, Inner>(in inner.Node, ignorePotentialSideEffects);

        public static bool Count<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> source, Func<TSource, bool> predicate)
            where Inner : <#= nodeTSource #>
            => NodeImpl.Count<TSource, Inner>(in source.Node, predicate);

        public static bool Contains<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, TSource value)
            where Inner : <#= nodeTSource #>
            => NodeImpl.Contains(in inner.Node, value);

        public static bool Contains<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> inner, TSource value, IEqualityComparer<TSource> comparer)
            where Inner : <#= nodeTSource #>
            => NodeImpl.Contains(in inner.Node, value, comparer);

        public static ValueEnumerable<TResult, SelectManyNode<TSource, TResult, NodeT, NodeU>> SelectMany<TSource, TResult, NodeT, NodeU>(in this <#= valueEnumerableType #><TSource, NodeT> prior, Func<TSource, ValueEnumerable<TResult, NodeU>> selector)
            where NodeT : <#= nodeTSource #>
            where NodeU : INode<TResult>
            => new (NodeImpl.SelectMany(in prior.Node, selector));

        public static ValueEnumerable<TResult, SelectManyNode<TSource, TCollection, TResult, NodeT, NodeU>> SelectMany<TSource, TCollection, TResult, NodeT, NodeU>(in this <#= valueEnumerableType #><TSource, NodeT> prior, Func<TSource, ValueEnumerable<TCollection, NodeU>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
            where NodeT : <#= nodeTSource #>
            where NodeU : INode<TCollection>
            => new (NodeImpl.SelectMany(in prior.Node, collectionSelector, resultSelector));

        public static ValueEnumerable<TSource, ConcatNode<TSource, First, Second>> Concat<TSource, First, Second>(in this <#= valueEnumerableType #><TSource, First> first, in ValueEnumerable<TSource, Second> second)
            where First : <#= nodeTSource #>
            where Second : <#= nodeTSource #>
            => new (NodeImpl.Concat<TSource, First, Second>(in first.Node, in second.Node));

        public static ValueEnumerable<TSource, ReverseNode<TSource, Inner>> Reverse<TSource, Inner>(in this <#= valueEnumerableType #><TSource, Inner> source, int? maybeMaxCountForStackBasedPath = 64, (ArrayPool<TSource> arrayPool, bool cleanBuffers)? arrayPoolInfo = null)
            where Inner : <#= nodeTSource #>
            => new (NodeImpl.Reverse<TSource, Inner>(in source.Node, maybeMaxCountForStackBasedPath, arrayPoolInfo));

        public static ValueEnumerable<U, ValueSelectNode<TSource, U, TPrior, IFunc>> Select<TSource, U, TPrior, IFunc>(in this <#= valueEnumerableType #><TSource, TPrior> prior, IFunc selector, U u = default)
            where TPrior : <#= nodeTSource #>
            where IFunc : IFuncBase<TSource, U>
            => new (NodeImpl.Select<TSource, U, TPrior, IFunc>(in prior.Node, selector, u));

        public static ValueEnumerable<TSource, ValueWhereNode<TSource, TPrior, Predicate>> Where<TSource, TPrior, Predicate>(in this <#= valueEnumerableType #><TSource, TPrior> prior, Predicate predicate)
            where TPrior : <#= nodeTSource #>
            where Predicate : IFuncBase<TSource, bool>
            => new (NodeImpl.Where<TSource, TPrior, Predicate>(in prior.Node, predicate));

        public static ValueOrderedEnumerable<TSource, OrderByNode<TSource, TKey, TPrior>> OrderBy<TSource, TKey, TPrior>(in this <#= valueEnumerableType #><TSource, TPrior> prior, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
            where TPrior : <#= nodeTSource #>
            => new(NodeImpl.OrderBy<TSource, TKey, TPrior>(in prior.Node, keySelector, comparer, false));

        public static ValueOrderedEnumerable<TSource, OrderByNode<TSource, TKey, TPrior>> OrderByDescending<TSource, TKey, TPrior>(in this <#= valueEnumerableType #><TSource, TPrior> prior, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
            where TPrior : <#= nodeTSource #>
            => new(NodeImpl.OrderBy<TSource, TKey, TPrior>(in prior.Node, keySelector, comparer, true));
<#
        if (valueEnumerableType == "ValueOrderedEnumerable")
        {
#>

        public static ValueOrderedEnumerable<TSource, ThenByNode<TSource, TKey, TPrior>> ThenBy<TSource, TKey, TPrior>(in this ValueOrderedEnumerable<TSource, TPrior> prior, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
            where TPrior : <#= nodeTSource #>
            => new(NodeImpl.ThenBy<TSource, TKey, TPrior>(in prior.Node, keySelector, comparer, false));

        public static ValueOrderedEnumerable<TSource, ThenByNode<TSource, TKey, TPrior>> ThenByDescending<TSource, TKey, TPrior>(in this ValueOrderedEnumerable<TSource, TPrior> prior, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
            where TPrior : <#= nodeTSource #>
            => new(NodeImpl.ThenBy<TSource, TKey, TPrior>(in prior.Node, keySelector, comparer, true));
<#
        }
#>
    }
<#
    }
#>
}

<# */ #>
