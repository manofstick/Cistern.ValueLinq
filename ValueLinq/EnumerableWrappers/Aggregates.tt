<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Collections.tth" #>

<#
    var aggregateTypes = new []
    {
        (
            Signature: new Func<string, string>(collection => $"Aggregate<TSource>(this {collection} source, Func<TSource, TSource, TSource> func)"),
            Class: "ReduceForward<TSource>",
            Args: "func",
            AggregateReturns: "TSource",
            FunctionReturns: "TSource",
            WrapReturn: new Func<string, string>(s => s)
        ),
        (
            Signature: new Func<string, string>(collection => $"Aggregate<TSource, TAccumulate>(this {collection} source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)"),
            Class: "FoldForward<TSource, TAccumulate>",
            Args: "func, seed",
            AggregateReturns: "TAccumulate",
            FunctionReturns: "TAccumulate",
            WrapReturn: new Func<string, string>(s => s)
        ),
        (
            Signature: new Func<string, string>(collection => $"Aggregate<TSource, TAccumulate, TResult>(this {collection} source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)"),
            Class: "FoldForward<TSource, TAccumulate>",
            Args: "func, seed",
            AggregateReturns: "TAccumulate",
            FunctionReturns: "TResult",
            WrapReturn: new Func<string, string>(s => $"resultSelector({s})")
        ),
        (
            Signature: new Func<string, string>(collection => $"All<TSource>(this {collection} source, Func<TSource, bool> predicate)"),
            Class: "All<TSource, FuncToIFunc<TSource, bool>>",
            Args: "new FuncToIFunc<TSource, bool>(predicate)",
            AggregateReturns: "bool",
            FunctionReturns: "bool",
            WrapReturn: new Func<string, string>(s => s)
        ),
        (
            Signature: new Func<string, string>(collection => $"Any<TSource>(this {collection} source, Func<TSource, bool> predicate)"),
            Class: "Any<TSource>",
            Args: "new Func<TSource, bool>(predicate)",
            AggregateReturns: "bool",
            FunctionReturns: "bool",
            WrapReturn: new Func<string, string>(s => s)
        ),
        (
            Signature: new Func<string, string>(collection => $"Count<TSource>(this {collection} source, Func<TSource, bool> predicate)"),
            Class: "CountIf<TSource>",
            Args: "new Func<TSource, bool>(predicate)",
            AggregateReturns: "int",
            FunctionReturns: "int",
            WrapReturn: new Func<string, string>(s => s)
        ),

    };
#>

using Cistern.ValueLinq.Aggregation;
using Cistern.ValueLinq.Containers;
using Cistern.ValueLinq.Nodes;
using System;
using System.Collections.Generic;

namespace Cistern.ValueLinq
{
<#
    foreach(var collection in collections)
    {
        var genericCollectionType = collection.CollectionType("TSource");
#>
    public static partial class <#= collection.StaticClassName #>
    {
<#
        foreach(var aggregate in aggregateTypes)
        {
            var signature = $"public static {aggregate.FunctionReturns} {aggregate.Signature(genericCollectionType)}";

            if (collection.OptimizedCall != null)
            {
#>
        <#= signature #>
        {
            var aggregate = new <#= aggregate.Class #>(<#= aggregate.Args #>);
            <#= collection.OptimizedCall #>(source, ref aggregate);
            return <#= aggregate.WrapReturn("aggregate.GetResult()") #>;
        }

<#
            }
            else
            {
#>
        <#= signature #> =>
            <#= aggregate.WrapReturn($"{collection.FastEnumerate}<TSource, {aggregate.AggregateReturns}, {aggregate.Class}>(source, new {aggregate.Class}({aggregate.Args}))") #>; 

<#
            }
        }
#>
    }
<#
    }
#>
}




